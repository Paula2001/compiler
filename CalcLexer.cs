//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/paula/compiler/Calc.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalcLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, NUM=7, ID=8, DATA_TYPE=9, 
		COMMENT=10, WS=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NUM", "ID", "DATA_TYPE", 
		"COMMENT", "WS"
	};


	public CalcLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalcLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "NUM", "ID", "DATA_TYPE", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalcLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,91,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,3,6,38,8,6,1,6,1,6,5,6,42,8,6,10,6,12,6,45,9,6,3,6,
		47,8,6,1,7,4,7,50,8,7,11,7,12,7,51,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,72,8,8,1,9,1,9,1,9,1,9,5,9,78,
		8,9,10,9,12,9,81,9,9,1,9,1,9,1,10,4,10,86,8,10,11,10,12,10,87,1,10,1,10,
		0,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,5,1,0,49,
		57,1,0,48,57,2,0,65,90,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,99,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,23,
		1,0,0,0,3,25,1,0,0,0,5,27,1,0,0,0,7,29,1,0,0,0,9,31,1,0,0,0,11,33,1,0,
		0,0,13,46,1,0,0,0,15,49,1,0,0,0,17,71,1,0,0,0,19,73,1,0,0,0,21,85,1,0,
		0,0,23,24,5,61,0,0,24,2,1,0,0,0,25,26,5,59,0,0,26,4,1,0,0,0,27,28,5,42,
		0,0,28,6,1,0,0,0,29,30,5,47,0,0,30,8,1,0,0,0,31,32,5,43,0,0,32,10,1,0,
		0,0,33,34,5,45,0,0,34,12,1,0,0,0,35,47,5,48,0,0,36,38,5,45,0,0,37,36,1,
		0,0,0,37,38,1,0,0,0,38,39,1,0,0,0,39,43,7,0,0,0,40,42,7,1,0,0,41,40,1,
		0,0,0,42,45,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,47,1,0,0,0,45,43,1,
		0,0,0,46,35,1,0,0,0,46,37,1,0,0,0,47,14,1,0,0,0,48,50,7,2,0,0,49,48,1,
		0,0,0,50,51,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,16,1,0,0,0,53,54,5,
		105,0,0,54,55,5,110,0,0,55,72,5,116,0,0,56,57,5,102,0,0,57,58,5,108,0,
		0,58,59,5,111,0,0,59,60,5,97,0,0,60,72,5,116,0,0,61,62,5,100,0,0,62,63,
		5,111,0,0,63,64,5,117,0,0,64,65,5,98,0,0,65,66,5,108,0,0,66,72,5,101,0,
		0,67,68,5,99,0,0,68,69,5,104,0,0,69,70,5,97,0,0,70,72,5,114,0,0,71,53,
		1,0,0,0,71,56,1,0,0,0,71,61,1,0,0,0,71,67,1,0,0,0,72,18,1,0,0,0,73,74,
		5,47,0,0,74,75,5,47,0,0,75,79,1,0,0,0,76,78,8,3,0,0,77,76,1,0,0,0,78,81,
		1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,83,
		6,9,0,0,83,20,1,0,0,0,84,86,7,4,0,0,85,84,1,0,0,0,86,87,1,0,0,0,87,85,
		1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,90,6,10,0,0,90,22,1,0,0,0,8,0,37,
		43,46,51,71,79,87,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
