//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/paula/compiler/Calc.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalcLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, OTHER_STATEMENT=21, COMMENT=22, WS=23, DATA_TYPE=24, 
		ID=25, NUM=26, STRING=27, BOOLEAN=28;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "OTHER_STATEMENT", "COMMENT", "WS", "DATA_TYPE", 
		"ID", "NUM", "STRING", "BOOLEAN"
	};


	public CalcLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalcLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "'='", "';'", "'('", "')'", "'?'", "'*'", "'/'", "'+'", "'-'", 
		"'++'", "'--'", "'<'", "'>'", "'=='", "'<='", "'>='", "'for'", "'){'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "OTHER_STATEMENT", 
		"COMMENT", "WS", "DATA_TYPE", "ID", "NUM", "STRING", "BOOLEAN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalcLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,198,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
		1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,
		15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
		19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,114,8,21,10,21,12,21,117,
		9,21,1,21,1,21,1,22,4,22,122,8,22,11,22,12,22,123,1,22,1,22,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,3,23,146,8,23,1,24,4,24,149,8,24,11,24,12,24,150,1,25,1,25,3,
		25,155,8,25,1,25,1,25,5,25,159,8,25,10,25,12,25,162,9,25,1,25,3,25,165,
		8,25,1,25,1,25,4,25,169,8,25,11,25,12,25,170,3,25,173,8,25,3,25,175,8,
		25,1,26,1,26,1,26,1,26,5,26,181,8,26,10,26,12,26,184,9,26,1,26,1,26,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,197,8,27,0,0,28,1,1,3,
		2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,1,0,6,2,0,10,10,13,13,3,0,9,10,13,13,32,32,2,0,65,90,97,122,1,0,
		49,57,1,0,48,57,3,0,10,10,13,13,34,34,212,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,
		0,5,61,1,0,0,0,7,63,1,0,0,0,9,65,1,0,0,0,11,67,1,0,0,0,13,69,1,0,0,0,15,
		71,1,0,0,0,17,73,1,0,0,0,19,75,1,0,0,0,21,77,1,0,0,0,23,80,1,0,0,0,25,
		83,1,0,0,0,27,85,1,0,0,0,29,87,1,0,0,0,31,90,1,0,0,0,33,93,1,0,0,0,35,
		96,1,0,0,0,37,100,1,0,0,0,39,103,1,0,0,0,41,105,1,0,0,0,43,109,1,0,0,0,
		45,121,1,0,0,0,47,145,1,0,0,0,49,148,1,0,0,0,51,174,1,0,0,0,53,176,1,0,
		0,0,55,196,1,0,0,0,57,58,5,58,0,0,58,2,1,0,0,0,59,60,5,61,0,0,60,4,1,0,
		0,0,61,62,5,59,0,0,62,6,1,0,0,0,63,64,5,40,0,0,64,8,1,0,0,0,65,66,5,41,
		0,0,66,10,1,0,0,0,67,68,5,63,0,0,68,12,1,0,0,0,69,70,5,42,0,0,70,14,1,
		0,0,0,71,72,5,47,0,0,72,16,1,0,0,0,73,74,5,43,0,0,74,18,1,0,0,0,75,76,
		5,45,0,0,76,20,1,0,0,0,77,78,5,43,0,0,78,79,5,43,0,0,79,22,1,0,0,0,80,
		81,5,45,0,0,81,82,5,45,0,0,82,24,1,0,0,0,83,84,5,60,0,0,84,26,1,0,0,0,
		85,86,5,62,0,0,86,28,1,0,0,0,87,88,5,61,0,0,88,89,5,61,0,0,89,30,1,0,0,
		0,90,91,5,60,0,0,91,92,5,61,0,0,92,32,1,0,0,0,93,94,5,62,0,0,94,95,5,61,
		0,0,95,34,1,0,0,0,96,97,5,102,0,0,97,98,5,111,0,0,98,99,5,114,0,0,99,36,
		1,0,0,0,100,101,5,41,0,0,101,102,5,123,0,0,102,38,1,0,0,0,103,104,5,125,
		0,0,104,40,1,0,0,0,105,106,9,0,0,0,106,107,1,0,0,0,107,108,6,20,0,0,108,
		42,1,0,0,0,109,110,5,47,0,0,110,111,5,47,0,0,111,115,1,0,0,0,112,114,8,
		0,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,
		116,118,1,0,0,0,117,115,1,0,0,0,118,119,6,21,0,0,119,44,1,0,0,0,120,122,
		7,1,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,
		0,124,125,1,0,0,0,125,126,6,22,0,0,126,46,1,0,0,0,127,128,5,105,0,0,128,
		129,5,110,0,0,129,146,5,116,0,0,130,131,5,102,0,0,131,132,5,108,0,0,132,
		133,5,111,0,0,133,134,5,97,0,0,134,146,5,116,0,0,135,136,5,115,0,0,136,
		137,5,116,0,0,137,138,5,114,0,0,138,139,5,105,0,0,139,140,5,110,0,0,140,
		146,5,103,0,0,141,142,5,98,0,0,142,143,5,111,0,0,143,144,5,111,0,0,144,
		146,5,108,0,0,145,127,1,0,0,0,145,130,1,0,0,0,145,135,1,0,0,0,145,141,
		1,0,0,0,146,48,1,0,0,0,147,149,7,2,0,0,148,147,1,0,0,0,149,150,1,0,0,0,
		150,148,1,0,0,0,150,151,1,0,0,0,151,50,1,0,0,0,152,175,5,48,0,0,153,155,
		5,45,0,0,154,153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,160,7,3,0,
		0,157,159,7,4,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,
		161,1,0,0,0,161,165,1,0,0,0,162,160,1,0,0,0,163,165,7,4,0,0,164,154,1,
		0,0,0,164,163,1,0,0,0,165,172,1,0,0,0,166,168,9,0,0,0,167,169,7,4,0,0,
		168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,
		1,0,0,0,172,166,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,152,1,0,0,
		0,174,164,1,0,0,0,175,52,1,0,0,0,176,182,5,34,0,0,177,181,8,5,0,0,178,
		179,5,34,0,0,179,181,5,34,0,0,180,177,1,0,0,0,180,178,1,0,0,0,181,184,
		1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,
		0,185,186,5,34,0,0,186,54,1,0,0,0,187,188,5,116,0,0,188,189,5,114,0,0,
		189,190,5,117,0,0,190,197,5,101,0,0,191,192,5,102,0,0,192,193,5,97,0,0,
		193,194,5,108,0,0,194,195,5,115,0,0,195,197,5,101,0,0,196,187,1,0,0,0,
		196,191,1,0,0,0,197,56,1,0,0,0,14,0,115,123,145,150,154,160,164,170,172,
		174,180,182,196,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
